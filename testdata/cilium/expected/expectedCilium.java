package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.kubernetes.apps_v1.DaemonSet;
import com.pulumi.kubernetes.apps_v1.DaemonSetArgs;
import com.pulumi.kubernetes.meta_v1.inputs.ObjectMetaArgs;
import com.pulumi.kubernetes.apps_v1.inputs.DaemonSetSpecArgs;
import com.pulumi.kubernetes.meta_v1.inputs.LabelSelectorArgs;
import com.pulumi.kubernetes.apps_v1.inputs.DaemonSetUpdateStrategyArgs;
import com.pulumi.kubernetes.apps_v1.inputs.RollingUpdateDaemonSetArgs;
import com.pulumi.kubernetes.core_v1.inputs.PodTemplateSpecArgs;
import com.pulumi.kubernetes.core_v1.inputs.PodSpecArgs;
import com.pulumi.kubernetes.core_v1.inputs.AffinityArgs;
import com.pulumi.kubernetes.core_v1.inputs.PodAntiAffinityArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var defaultCiliumDaemonSet = new DaemonSet("defaultCiliumDaemonSet", DaemonSetArgs.builder()        
            .apiVersion("apps/v1")
            .kind("DaemonSet")
            .metadata(ObjectMetaArgs.builder()
                .name("cilium")
                .namespace("default")
                .labels(Map.ofEntries(
                    Map.entry("k8s-app", "cilium"),
                    Map.entry("app.kubernetes.io/part-of", "cilium"),
                    Map.entry("app.kubernetes.io/name", "cilium-agent")
                ))
                .build())
            .spec(DaemonSetSpecArgs.builder()
                .selector(LabelSelectorArgs.builder()
                    .matchLabels(Map.of("k8s-app", "cilium"))
                    .build())
                .updateStrategy(DaemonSetUpdateStrategyArgs.builder()
                    .rollingUpdate(RollingUpdateDaemonSetArgs.builder()
                        .maxUnavailable(2)
                        .build())
                    .type("RollingUpdate")
                    .build())
                .template(PodTemplateSpecArgs.builder()
                    .metadata(ObjectMetaArgs.builder()
                        .annotations(Map.ofEntries(
                            Map.entry("container.apparmor.security.beta.kubernetes.io/cilium-agent", "unconfined"),
                            Map.entry("container.apparmor.security.beta.kubernetes.io/clean-cilium-state", "unconfined"),
                            Map.entry("container.apparmor.security.beta.kubernetes.io/mount-cgroup", "unconfined"),
                            Map.entry("container.apparmor.security.beta.kubernetes.io/apply-sysctl-overwrites", "unconfined")
                        ))
                        .labels(Map.ofEntries(
                            Map.entry("k8s-app", "cilium"),
                            Map.entry("app.kubernetes.io/name", "cilium-agent"),
                            Map.entry("app.kubernetes.io/part-of", "cilium")
                        ))
                        .build())
                    .spec(PodSpecArgs.builder()
                        .containers(ContainerArgs.builder()
                            .name("cilium-agent")
                            .image("quay.io/cilium/cilium:v1.14.2@sha256:6263f3a3d5d63b267b538298dbeb5ae87da3efacf09a2c620446c873ba807d35")
                            .imagePullPolicy("IfNotPresent")
                            .command("cilium-agent")
                            .args("--config-dir=/tmp/cilium/config-map")
                            .startupProbe(ProbeArgs.builder()
                                .httpGet(HTTPGetActionArgs.builder()
                                    .host("127.0.0.1")
                                    .path("/healthz")
                                    .port(9879)
                                    .scheme("HTTP")
                                    .httpHeaders(HTTPHeaderArgs.builder()
                                        .name("brief")
                                        .value("true")
                                        .build())
                                    .build())
                                .failureThreshold(105)
                                .periodSeconds(2)
                                .successThreshold(1)
                                .build())
                            .livenessProbe(ProbeArgs.builder()
                                .httpGet(HTTPGetActionArgs.builder()
                                    .host("127.0.0.1")
                                    .path("/healthz")
                                    .port(9879)
                                    .scheme("HTTP")
                                    .httpHeaders(HTTPHeaderArgs.builder()
                                        .name("brief")
                                        .value("true")
                                        .build())
                                    .build())
                                .periodSeconds(30)
                                .successThreshold(1)
                                .failureThreshold(10)
                                .timeoutSeconds(5)
                                .build())
                            .readinessProbe(ProbeArgs.builder()
                                .httpGet(HTTPGetActionArgs.builder()
                                    .host("127.0.0.1")
                                    .path("/healthz")
                                    .port(9879)
                                    .scheme("HTTP")
                                    .httpHeaders(HTTPHeaderArgs.builder()
                                        .name("brief")
                                        .value("true")
                                        .build())
                                    .build())
                                .periodSeconds(30)
                                .successThreshold(1)
                                .failureThreshold(3)
                                .timeoutSeconds(5)
                                .build())
                            .env(                            
                                EnvVarArgs.builder()
                                    .name("K8S_NODE_NAME")
                                    .valueFrom(EnvVarSourceArgs.builder()
                                        .fieldRef(ObjectFieldSelectorArgs.builder()
                                            .apiVersion("v1")
                                            .fieldPath("spec.nodeName")
                                            .build())
                                        .build())
                                    .build(),
                                EnvVarArgs.builder()
                                    .name("CILIUM_K8S_NAMESPACE")
                                    .valueFrom(EnvVarSourceArgs.builder()
                                        .fieldRef(ObjectFieldSelectorArgs.builder()
                                            .apiVersion("v1")
                                            .fieldPath("metadata.namespace")
                                            .build())
                                        .build())
                                    .build(),
                                EnvVarArgs.builder()
                                    .name("CILIUM_CLUSTERMESH_CONFIG")
                                    .value("/var/lib/cilium/clustermesh/")
                                    .build())
                            .lifecycle(LifecycleArgs.builder()
                                .preStop(LifecycleHandlerArgs.builder()
                                    .exec(ExecActionArgs.builder()
                                        .command("/cni-uninstall.sh")
                                        .build())
                                    .build())
                                .build())
                            .securityContext(SecurityContextArgs.builder()
                                .seLinuxOptions(SELinuxOptionsArgs.builder()
                                    .level("s0")
                                    .type("spc_t")
                                    .build())
                                .capabilities(CapabilitiesArgs.builder()
                                    .add(                                    
                                        "CHOWN",
                                        "KILL",
                                        "NET_ADMIN",
                                        "NET_RAW",
                                        "IPC_LOCK",
                                        "SYS_MODULE",
                                        "SYS_ADMIN",
                                        "SYS_RESOURCE",
                                        "DAC_OVERRIDE",
                                        "FOWNER",
                                        "SETGID",
                                        "SETUID")
                                    .drop("ALL")
                                    .build())
                                .build())
                            .terminationMessagePolicy("FallbackToLogsOnError")
                            .volumeMounts(                            
                                VolumeMountArgs.builder()
                                    .mountPath("/host/proc/sys/net")
                                    .name("host-proc-sys-net")
                                    .build(),
                                VolumeMountArgs.builder()
                                    .mountPath("/host/proc/sys/kernel")
                                    .name("host-proc-sys-kernel")
                                    .build(),
                                VolumeMountArgs.builder()
                                    .name("bpf-maps")
                                    .mountPath("/sys/fs/bpf")
                                    .mountPropagation("HostToContainer")
                                    .build(),
                                VolumeMountArgs.builder()
                                    .name("cilium-run")
                                    .mountPath("/var/run/cilium")
                                    .build(),
                                VolumeMountArgs.builder()
                                    .name("etc-cni-netd")
                                    .mountPath("/host/etc/cni/net.d")
                                    .build(),
                                VolumeMountArgs.builder()
                                    .name("clustermesh-secrets")
                                    .mountPath("/var/lib/cilium/clustermesh")
                                    .readOnly(true)
                                    .build(),
                                VolumeMountArgs.builder()
                                    .name("lib-modules")
                                    .mountPath("/lib/modules")
                                    .readOnly(true)
                                    .build(),
                                VolumeMountArgs.builder()
                                    .name("xtables-lock")
                                    .mountPath("/run/xtables.lock")
                                    .build(),
                                VolumeMountArgs.builder()
                                    .name("hubble-tls")
                                    .mountPath("/var/lib/cilium/tls/hubble")
                                    .readOnly(true)
                                    .build(),
                                VolumeMountArgs.builder()
                                    .name("tmp")
                                    .mountPath("/tmp")
                                    .build())
                            .build())
                        .initContainers(                        
                            ContainerArgs.builder()
                                .name("config")
                                .image("quay.io/cilium/cilium:v1.14.2@sha256:6263f3a3d5d63b267b538298dbeb5ae87da3efacf09a2c620446c873ba807d35")
                                .imagePullPolicy("IfNotPresent")
                                .command(                                
                                    "cilium",
                                    "build-config")
                                .env(                                
                                    EnvVarArgs.builder()
                                        .name("K8S_NODE_NAME")
                                        .valueFrom(EnvVarSourceArgs.builder()
                                            .fieldRef(ObjectFieldSelectorArgs.builder()
                                                .apiVersion("v1")
                                                .fieldPath("spec.nodeName")
                                                .build())
                                            .build())
                                        .build(),
                                    EnvVarArgs.builder()
                                        .name("CILIUM_K8S_NAMESPACE")
                                        .valueFrom(EnvVarSourceArgs.builder()
                                            .fieldRef(ObjectFieldSelectorArgs.builder()
                                                .apiVersion("v1")
                                                .fieldPath("metadata.namespace")
                                                .build())
                                            .build())
                                        .build())
                                .volumeMounts(VolumeMountArgs.builder()
                                    .name("tmp")
                                    .mountPath("/tmp")
                                    .build())
                                .terminationMessagePolicy("FallbackToLogsOnError")
                                .build(),
                            ContainerArgs.builder()
                                .name("mount-cgroup")
                                .image("quay.io/cilium/cilium:v1.14.2@sha256:6263f3a3d5d63b267b538298dbeb5ae87da3efacf09a2c620446c873ba807d35")
                                .imagePullPolicy("IfNotPresent")
                                .env(                                
                                    EnvVarArgs.builder()
                                        .name("CGROUP_ROOT")
                                        .value("/run/cilium/cgroupv2")
                                        .build(),
                                    EnvVarArgs.builder()
                                        .name("BIN_PATH")
                                        .value("/opt/cni/bin")
                                        .build())
                                .command(                                
                                    "sh",
                                    "-ec",
                                    """
cp /usr/bin/cilium-mount /hostbin/cilium-mount;
              nsenter --cgroup=/hostproc/1/ns/cgroup --mount=/hostproc/1/ns/mnt "${BIN_PATH}/cilium-mount" $CGROUP_ROOT;
              rm /hostbin/cilium-mount
                                    """)
                                .volumeMounts(                                
                                    VolumeMountArgs.builder()
                                        .name("hostproc")
                                        .mountPath("/hostproc")
                                        .build(),
                                    VolumeMountArgs.builder()
                                        .name("cni-path")
                                        .mountPath("/hostbin")
                                        .build())
                                .terminationMessagePolicy("FallbackToLogsOnError")
                                .securityContext(SecurityContextArgs.builder()
                                    .seLinuxOptions(SELinuxOptionsArgs.builder()
                                        .level("s0")
                                        .type("spc_t")
                                        .build())
                                    .capabilities(CapabilitiesArgs.builder()
                                        .add(                                        
                                            "SYS_ADMIN",
                                            "SYS_CHROOT",
                                            "SYS_PTRACE")
                                        .drop("ALL")
                                        .build())
                                    .build())
                                .build(),
                            ContainerArgs.builder()
                                .name("apply-sysctl-overwrites")
                                .image("quay.io/cilium/cilium:v1.14.2@sha256:6263f3a3d5d63b267b538298dbeb5ae87da3efacf09a2c620446c873ba807d35")
                                .imagePullPolicy("IfNotPresent")
                                .env(EnvVarArgs.builder()
                                    .name("BIN_PATH")
                                    .value("/opt/cni/bin")
                                    .build())
                                .command(                                
                                    "sh",
                                    "-ec",
                                    """
cp /usr/bin/cilium-sysctlfix /hostbin/cilium-sysctlfix;
              nsenter --mount=/hostproc/1/ns/mnt "${BIN_PATH}/cilium-sysctlfix";
              rm /hostbin/cilium-sysctlfix
                                    """)
                                .volumeMounts(                                
                                    VolumeMountArgs.builder()
                                        .name("hostproc")
                                        .mountPath("/hostproc")
                                        .build(),
                                    VolumeMountArgs.builder()
                                        .name("cni-path")
                                        .mountPath("/hostbin")
                                        .build())
                                .terminationMessagePolicy("FallbackToLogsOnError")
                                .securityContext(SecurityContextArgs.builder()
                                    .seLinuxOptions(SELinuxOptionsArgs.builder()
                                        .level("s0")
                                        .type("spc_t")
                                        .build())
                                    .capabilities(CapabilitiesArgs.builder()
                                        .add(                                        
                                            "SYS_ADMIN",
                                            "SYS_CHROOT",
                                            "SYS_PTRACE")
                                        .drop("ALL")
                                        .build())
                                    .build())
                                .build(),
                            ContainerArgs.builder()
                                .name("mount-bpf-fs")
                                .image("quay.io/cilium/cilium:v1.14.2@sha256:6263f3a3d5d63b267b538298dbeb5ae87da3efacf09a2c620446c873ba807d35")
                                .imagePullPolicy("IfNotPresent")
                                .args("mount | grep \"/sys/fs/bpf type bpf\" || mount -t bpf bpf /sys/fs/bpf")
                                .command(                                
                                    "/bin/bash",
                                    "-c",
                                    "--")
                                .terminationMessagePolicy("FallbackToLogsOnError")
                                .securityContext(SecurityContextArgs.builder()
                                    .privileged(true)
                                    .build())
                                .volumeMounts(VolumeMountArgs.builder()
                                    .name("bpf-maps")
                                    .mountPath("/sys/fs/bpf")
                                    .mountPropagation("Bidirectional")
                                    .build())
                                .build(),
                            ContainerArgs.builder()
                                .name("clean-cilium-state")
                                .image("quay.io/cilium/cilium:v1.14.2@sha256:6263f3a3d5d63b267b538298dbeb5ae87da3efacf09a2c620446c873ba807d35")
                                .imagePullPolicy("IfNotPresent")
                                .command("/init-container.sh")
                                .env(                                
                                    EnvVarArgs.builder()
                                        .name("CILIUM_ALL_STATE")
                                        .valueFrom(EnvVarSourceArgs.builder()
                                            .configMapKeyRef(ConfigMapKeySelectorArgs.builder()
                                                .name("cilium-config")
                                                .key("clean-cilium-state")
                                                .optional(true)
                                                .build())
                                            .build())
                                        .build(),
                                    EnvVarArgs.builder()
                                        .name("CILIUM_BPF_STATE")
                                        .valueFrom(EnvVarSourceArgs.builder()
                                            .configMapKeyRef(ConfigMapKeySelectorArgs.builder()
                                                .name("cilium-config")
                                                .key("clean-cilium-bpf-state")
                                                .optional(true)
                                                .build())
                                            .build())
                                        .build())
                                .terminationMessagePolicy("FallbackToLogsOnError")
                                .securityContext(SecurityContextArgs.builder()
                                    .seLinuxOptions(SELinuxOptionsArgs.builder()
                                        .level("s0")
                                        .type("spc_t")
                                        .build())
                                    .capabilities(CapabilitiesArgs.builder()
                                        .add(                                        
                                            "NET_ADMIN",
                                            "SYS_MODULE",
                                            "SYS_ADMIN",
                                            "SYS_RESOURCE")
                                        .drop("ALL")
                                        .build())
                                    .build())
                                .volumeMounts(                                
                                    VolumeMountArgs.builder()
                                        .name("bpf-maps")
                                        .mountPath("/sys/fs/bpf")
                                        .build(),
                                    VolumeMountArgs.builder()
                                        .name("cilium-cgroup")
                                        .mountPath("/run/cilium/cgroupv2")
                                        .mountPropagation("HostToContainer")
                                        .build(),
                                    VolumeMountArgs.builder()
                                        .name("cilium-run")
                                        .mountPath("/var/run/cilium")
                                        .build())
                                .resources(ResourceRequirementsArgs.builder()
                                    .requests(Map.ofEntries(
                                        Map.entry("cpu", "100m"),
                                        Map.entry("memory", "100Mi")
                                    ))
                                    .build())
                                .build(),
                            ContainerArgs.builder()
                                .name("install-cni-binaries")
                                .image("quay.io/cilium/cilium:v1.14.2@sha256:6263f3a3d5d63b267b538298dbeb5ae87da3efacf09a2c620446c873ba807d35")
                                .imagePullPolicy("IfNotPresent")
                                .command("/install-plugin.sh")
                                .resources(ResourceRequirementsArgs.builder()
                                    .requests(Map.ofEntries(
                                        Map.entry("cpu", "100m"),
                                        Map.entry("memory", "10Mi")
                                    ))
                                    .build())
                                .securityContext(SecurityContextArgs.builder()
                                    .seLinuxOptions(SELinuxOptionsArgs.builder()
                                        .level("s0")
                                        .type("spc_t")
                                        .build())
                                    .capabilities(CapabilitiesArgs.builder()
                                        .drop("ALL")
                                        .build())
                                    .build())
                                .terminationMessagePolicy("FallbackToLogsOnError")
                                .volumeMounts(VolumeMountArgs.builder()
                                    .name("cni-path")
                                    .mountPath("/host/opt/cni/bin")
                                    .build())
                                .build())
                        .restartPolicy("Always")
                        .priorityClassName("system-node-critical")
                        .serviceAccount("cilium")
                        .serviceAccountName("cilium")
                        .automountServiceAccountToken(true)
                        .terminationGracePeriodSeconds(1)
                        .hostNetwork(true)
                        .affinity(AffinityArgs.builder()
                            .podAntiAffinity(PodAntiAffinityArgs.builder()
                                .requiredDuringSchedulingIgnoredDuringExecution(PodAffinityTermArgs.builder()
                                    .labelSelector(LabelSelectorArgs.builder()
                                        .matchLabels(Map.of("k8s-app", "cilium"))
                                        .build())
                                    .topologyKey("kubernetes.io/hostname")
                                    .build())
                                .build())
                            .build())
                        .nodeSelector(Map.of("kubernetes.io/os", "linux"))
                        .tolerations(TolerationArgs.builder()
                            .operator("Exists")
                            .build())
                        .volumes(                        
                            VolumeArgs.builder()
                                .name("tmp")
                                .emptyDir()
                                .build(),
                            VolumeArgs.builder()
                                .name("cilium-run")
                                .hostPath(HostPathVolumeSourceArgs.builder()
                                    .path("/var/run/cilium")
                                    .type("DirectoryOrCreate")
                                    .build())
                                .build(),
                            VolumeArgs.builder()
                                .name("bpf-maps")
                                .hostPath(HostPathVolumeSourceArgs.builder()
                                    .path("/sys/fs/bpf")
                                    .type("DirectoryOrCreate")
                                    .build())
                                .build(),
                            VolumeArgs.builder()
                                .name("hostproc")
                                .hostPath(HostPathVolumeSourceArgs.builder()
                                    .path("/proc")
                                    .type("Directory")
                                    .build())
                                .build(),
                            VolumeArgs.builder()
                                .name("cilium-cgroup")
                                .hostPath(HostPathVolumeSourceArgs.builder()
                                    .path("/run/cilium/cgroupv2")
                                    .type("DirectoryOrCreate")
                                    .build())
                                .build(),
                            VolumeArgs.builder()
                                .name("cni-path")
                                .hostPath(HostPathVolumeSourceArgs.builder()
                                    .path("/opt/cni/bin")
                                    .type("DirectoryOrCreate")
                                    .build())
                                .build(),
                            VolumeArgs.builder()
                                .name("etc-cni-netd")
                                .hostPath(HostPathVolumeSourceArgs.builder()
                                    .path("/etc/cni/net.d")
                                    .type("DirectoryOrCreate")
                                    .build())
                                .build(),
                            VolumeArgs.builder()
                                .name("lib-modules")
                                .hostPath(HostPathVolumeSourceArgs.builder()
                                    .path("/lib/modules")
                                    .build())
                                .build(),
                            VolumeArgs.builder()
                                .name("xtables-lock")
                                .hostPath(HostPathVolumeSourceArgs.builder()
                                    .path("/run/xtables.lock")
                                    .type("FileOrCreate")
                                    .build())
                                .build(),
                            VolumeArgs.builder()
                                .name("clustermesh-secrets")
                                .projected(ProjectedVolumeSourceArgs.builder()
                                    .defaultMode(400)
                                    .sources(                                    
                                        VolumeProjectionArgs.builder()
                                            .secret(SecretProjectionArgs.builder()
                                                .name("cilium-clustermesh")
                                                .optional(true)
                                                .build())
                                            .build(),
                                        VolumeProjectionArgs.builder()
                                            .secret(SecretProjectionArgs.builder()
                                                .name("clustermesh-apiserver-remote-cert")
                                                .optional(true)
                                                .items(                                                
                                                    KeyToPathArgs.builder()
                                                        .key("tls.key")
                                                        .path("common-etcd-client.key")
                                                        .build(),
                                                    KeyToPathArgs.builder()
                                                        .key("tls.crt")
                                                        .path("common-etcd-client.crt")
                                                        .build(),
                                                    KeyToPathArgs.builder()
                                                        .key("ca.crt")
                                                        .path("common-etcd-client-ca.crt")
                                                        .build())
                                                .build())
                                            .build())
                                    .build())
                                .build(),
                            VolumeArgs.builder()
                                .name("host-proc-sys-net")
                                .hostPath(HostPathVolumeSourceArgs.builder()
                                    .path("/proc/sys/net")
                                    .type("Directory")
                                    .build())
                                .build(),
                            VolumeArgs.builder()
                                .name("host-proc-sys-kernel")
                                .hostPath(HostPathVolumeSourceArgs.builder()
                                    .path("/proc/sys/kernel")
                                    .type("Directory")
                                    .build())
                                .build(),
                            VolumeArgs.builder()
                                .name("hubble-tls")
                                .projected(ProjectedVolumeSourceArgs.builder()
                                    .defaultMode(400)
                                    .sources(VolumeProjectionArgs.builder()
                                        .secret(SecretProjectionArgs.builder()
                                            .name("hubble-server-certs")
                                            .optional(true)
                                            .items(                                            
                                                KeyToPathArgs.builder()
                                                    .key("tls.crt")
                                                    .path("server.crt")
                                                    .build(),
                                                KeyToPathArgs.builder()
                                                    .key("tls.key")
                                                    .path("server.key")
                                                    .build(),
                                                KeyToPathArgs.builder()
                                                    .key("ca.crt")
                                                    .path("client-ca.crt")
                                                    .build())
                                            .build())
                                        .build())
                                    .build())
                                .build())
                        .build())
                    .build())
                .build())
            .build());

    }
}
